name: Release Virtual Network Module

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Verify Tag Format
        id: verify_tag
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format. Expected: v1.2.3"
            exit 1
          fi
          echo "✅ Valid tag format: $TAG"

      - name: Generate Release Notes
        id: release_notes
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "Generating release notes for $TAG"

          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -A1 "$TAG" | tail -n1)

          if [ -z "$PREV_TAG" ] || [ "$PREV_TAG" == "$TAG" ]; then
            echo "First release or no previous tag found"
            RELEASE_NOTES="## Virtual Network Azure Terraform Module ${TAG}\n\nInitial release of the Virtual Network deployment module for Azure."
          else
            echo "Comparing $PREV_TAG...$TAG"
            RELEASE_NOTES="## Virtual Network Azure Terraform Module ${TAG}\n\n### Changes\n\n$(git log --pretty=format:'- %s (%h)' ${PREV_TAG}..${TAG})"
          fi

          echo "$RELEASE_NOTES" > release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate:
    name: Validate Terraform Module
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.6.0"

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run Unit Tests
        run: terraform test -verbose

      - name: Generate Terraform Docs
        uses: terraform-docs/gh-actions@v1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: false

      - name: Verify Documentation is Up-to-Date
        run: |
          if git diff --exit-code README.md; then
            echo "✅ Documentation is up-to-date"
          else
            echo "❌ Documentation is out of date. Run 'make docs' to update."
            exit 1
          fi
